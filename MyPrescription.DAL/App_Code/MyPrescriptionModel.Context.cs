//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyPrescription.DAL.App_Code
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MyPrescriptionEntities : DbContext
    {
        public MyPrescriptionEntities()
            : base("name=MyPrescriptionEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<DoctorMaster> DoctorMasters { get; set; }
        public virtual DbSet<ErrorLog> ErrorLogs { get; set; }
        public virtual DbSet<FileMaster> FileMasters { get; set; }
        public virtual DbSet<HospitalMaster> HospitalMasters { get; set; }
        public virtual DbSet<RecordTypeMaster> RecordTypeMasters { get; set; }
        public virtual DbSet<UserMaster> UserMasters { get; set; }
        public virtual DbSet<VaultMaster> VaultMasters { get; set; }
        public virtual DbSet<UserDetail> UserDetails { get; set; }
    
        public virtual ObjectResult<ActivateAccount_Result> ActivateAccount(Nullable<System.Guid> token)
        {
            var tokenParameter = token.HasValue ?
                new ObjectParameter("token", token) :
                new ObjectParameter("token", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ActivateAccount_Result>("ActivateAccount", tokenParameter);
        }
    
        public virtual int AddNewDoctor(Nullable<int> doctorId, string name, string address, string phone, string phone2, string email, Nullable<int> hospitalId, Nullable<int> userId, string status, Nullable<bool> isPrimary)
        {
            var doctorIdParameter = doctorId.HasValue ?
                new ObjectParameter("doctorId", doctorId) :
                new ObjectParameter("doctorId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            var phone2Parameter = phone2 != null ?
                new ObjectParameter("phone2", phone2) :
                new ObjectParameter("phone2", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var hospitalIdParameter = hospitalId.HasValue ?
                new ObjectParameter("hospitalId", hospitalId) :
                new ObjectParameter("hospitalId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var isPrimaryParameter = isPrimary.HasValue ?
                new ObjectParameter("isPrimary", isPrimary) :
                new ObjectParameter("isPrimary", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddNewDoctor", doctorIdParameter, nameParameter, addressParameter, phoneParameter, phone2Parameter, emailParameter, hospitalIdParameter, userIdParameter, statusParameter, isPrimaryParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> AddNewFile(string fileName, Nullable<int> userId, Nullable<int> vaultId)
        {
            var fileNameParameter = fileName != null ?
                new ObjectParameter("fileName", fileName) :
                new ObjectParameter("fileName", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var vaultIdParameter = vaultId.HasValue ?
                new ObjectParameter("vaultId", vaultId) :
                new ObjectParameter("vaultId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("AddNewFile", fileNameParameter, userIdParameter, vaultIdParameter);
        }
    
        public virtual int AddNewHospital(Nullable<int> hospitalId, string name, string address, string phone, string phone2, string email, Nullable<int> userId, string status, Nullable<bool> isPrimary)
        {
            var hospitalIdParameter = hospitalId.HasValue ?
                new ObjectParameter("hospitalId", hospitalId) :
                new ObjectParameter("hospitalId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            var phone2Parameter = phone2 != null ?
                new ObjectParameter("phone2", phone2) :
                new ObjectParameter("phone2", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var isPrimaryParameter = isPrimary.HasValue ?
                new ObjectParameter("isPrimary", isPrimary) :
                new ObjectParameter("isPrimary", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddNewHospital", hospitalIdParameter, nameParameter, addressParameter, phoneParameter, phone2Parameter, emailParameter, userIdParameter, statusParameter, isPrimaryParameter);
        }
    
        public virtual int AddNewVault(string vaultName, Nullable<int> userId, Nullable<int> hospitalId, Nullable<int> doctorId, Nullable<System.DateTime> date, Nullable<int> recordId)
        {
            var vaultNameParameter = vaultName != null ?
                new ObjectParameter("vaultName", vaultName) :
                new ObjectParameter("vaultName", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var hospitalIdParameter = hospitalId.HasValue ?
                new ObjectParameter("hospitalId", hospitalId) :
                new ObjectParameter("hospitalId", typeof(int));
    
            var doctorIdParameter = doctorId.HasValue ?
                new ObjectParameter("doctorId", doctorId) :
                new ObjectParameter("doctorId", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var recordIdParameter = recordId.HasValue ?
                new ObjectParameter("recordId", recordId) :
                new ObjectParameter("recordId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddNewVault", vaultNameParameter, userIdParameter, hospitalIdParameter, doctorIdParameter, dateParameter, recordIdParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> CheckActivationStatus(Nullable<System.Guid> token)
        {
            var tokenParameter = token.HasValue ?
                new ObjectParameter("token", token) :
                new ObjectParameter("token", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("CheckActivationStatus", tokenParameter);
        }
    
        public virtual int DeleteDoctor(Nullable<int> doctorId, Nullable<int> userId)
        {
            var doctorIdParameter = doctorId.HasValue ?
                new ObjectParameter("doctorId", doctorId) :
                new ObjectParameter("doctorId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteDoctor", doctorIdParameter, userIdParameter);
        }
    
        public virtual int DeleteHospital(Nullable<int> hospitalId, Nullable<int> userId)
        {
            var hospitalIdParameter = hospitalId.HasValue ?
                new ObjectParameter("hospitalId", hospitalId) :
                new ObjectParameter("hospitalId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteHospital", hospitalIdParameter, userIdParameter);
        }
    
        public virtual int DeleteVault(Nullable<int> vaultId, Nullable<int> userId)
        {
            var vaultIdParameter = vaultId.HasValue ?
                new ObjectParameter("vaultId", vaultId) :
                new ObjectParameter("vaultId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteVault", vaultIdParameter, userIdParameter);
        }
    
        public virtual ObjectResult<FlagAsForgotPassword_Result> FlagAsForgotPassword(string email)
        {
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FlagAsForgotPassword_Result>("FlagAsForgotPassword", emailParameter);
        }
    
        public virtual ObjectResult<GetBadgeCount_Result> GetBadgeCount(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBadgeCount_Result>("GetBadgeCount", userIdParameter);
        }
    
        public virtual ObjectResult<GetDoctorDetails_Result> GetDoctorDetails(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDoctorDetails_Result>("GetDoctorDetails", userIdParameter);
        }
    
        public virtual ObjectResult<GetHospitalDetails_Result> GetHospitalDetails(Nullable<int> pageStart, Nullable<int> pageSize, Nullable<int> userId, string orderBy)
        {
            var pageStartParameter = pageStart.HasValue ?
                new ObjectParameter("pageStart", pageStart) :
                new ObjectParameter("pageStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("orderBy", orderBy) :
                new ObjectParameter("orderBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetHospitalDetails_Result>("GetHospitalDetails", pageStartParameter, pageSizeParameter, userIdParameter, orderByParameter);
        }
    
        public virtual ObjectResult<GetSingleDoctorDetails_Result> GetSingleDoctorDetails(string doctorId, string userId)
        {
            var doctorIdParameter = doctorId != null ?
                new ObjectParameter("doctorId", doctorId) :
                new ObjectParameter("doctorId", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSingleDoctorDetails_Result>("GetSingleDoctorDetails", doctorIdParameter, userIdParameter);
        }
    
        public virtual ObjectResult<GetSingleHospitalDetails_Result> GetSingleHospitalDetails(string hospitalId, string userId)
        {
            var hospitalIdParameter = hospitalId != null ?
                new ObjectParameter("hospitalId", hospitalId) :
                new ObjectParameter("hospitalId", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSingleHospitalDetails_Result>("GetSingleHospitalDetails", hospitalIdParameter, userIdParameter);
        }
    
        public virtual ObjectResult<GetSingleVaultDetails_Result> GetSingleVaultDetails(Nullable<int> userId, Nullable<int> vaultId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var vaultIdParameter = vaultId.HasValue ?
                new ObjectParameter("vaultId", vaultId) :
                new ObjectParameter("vaultId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSingleVaultDetails_Result>("GetSingleVaultDetails", userIdParameter, vaultIdParameter);
        }
    
        public virtual ObjectResult<GetVaultDetails_Result> GetVaultDetails(Nullable<int> pageStart, Nullable<int> pageSize, Nullable<int> userId)
        {
            var pageStartParameter = pageStart.HasValue ?
                new ObjectParameter("pageStart", pageStart) :
                new ObjectParameter("pageStart", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetVaultDetails_Result>("GetVaultDetails", pageStartParameter, pageSizeParameter, userIdParameter);
        }
    
        public virtual ObjectResult<GetVaultIdFileName_Result> GetVaultIdFileName(Nullable<int> fileId, Nullable<int> userId)
        {
            var fileIdParameter = fileId.HasValue ?
                new ObjectParameter("fileId", fileId) :
                new ObjectParameter("fileId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetVaultIdFileName_Result>("GetVaultIdFileName", fileIdParameter, userIdParameter);
        }
    
        public virtual int LogError(Nullable<int> userId, string errorCode, string errorMessage)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var errorCodeParameter = errorCode != null ?
                new ObjectParameter("errorCode", errorCode) :
                new ObjectParameter("errorCode", typeof(string));
    
            var errorMessageParameter = errorMessage != null ?
                new ObjectParameter("ErrorMessage", errorMessage) :
                new ObjectParameter("ErrorMessage", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LogError", userIdParameter, errorCodeParameter, errorMessageParameter);
        }
    
        public virtual ObjectResult<LogIn_Result> LogIn(string email, string password)
        {
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LogIn_Result>("LogIn", emailParameter, passwordParameter);
        }
    
        public virtual ObjectResult<ResetPassword_Result> ResetPassword(Nullable<System.Guid> token, string password)
        {
            var tokenParameter = token.HasValue ?
                new ObjectParameter("token", token) :
                new ObjectParameter("token", typeof(System.Guid));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ResetPassword_Result>("ResetPassword", tokenParameter, passwordParameter);
        }
    
        public virtual ObjectResult<SignUp_Result> SignUp(Nullable<int> userId, string fname, string lname, string email, string password)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var fnameParameter = fname != null ?
                new ObjectParameter("fname", fname) :
                new ObjectParameter("fname", typeof(string));
    
            var lnameParameter = lname != null ?
                new ObjectParameter("lname", lname) :
                new ObjectParameter("lname", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SignUp_Result>("SignUp", userIdParameter, fnameParameter, lnameParameter, emailParameter, passwordParameter);
        }
    
        public virtual int UpdateDoctorDetails(string doctorId, string name, string address, string phoneNo, string phoneNo2, string email, Nullable<bool> isPrimary, string userId, string hospitalId)
        {
            var doctorIdParameter = doctorId != null ?
                new ObjectParameter("doctorId", doctorId) :
                new ObjectParameter("doctorId", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var phoneNoParameter = phoneNo != null ?
                new ObjectParameter("phoneNo", phoneNo) :
                new ObjectParameter("phoneNo", typeof(string));
    
            var phoneNo2Parameter = phoneNo2 != null ?
                new ObjectParameter("phoneNo2", phoneNo2) :
                new ObjectParameter("phoneNo2", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var isPrimaryParameter = isPrimary.HasValue ?
                new ObjectParameter("isPrimary", isPrimary) :
                new ObjectParameter("isPrimary", typeof(bool));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var hospitalIdParameter = hospitalId != null ?
                new ObjectParameter("hospitalId", hospitalId) :
                new ObjectParameter("hospitalId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateDoctorDetails", doctorIdParameter, nameParameter, addressParameter, phoneNoParameter, phoneNo2Parameter, emailParameter, isPrimaryParameter, userIdParameter, hospitalIdParameter);
        }
    
        public virtual int UpdateHospitalDetails(Nullable<int> hospitalId, string name, string address, string phoneNo, string phoneNo2, string email, Nullable<bool> isPrimary, Nullable<int> userId)
        {
            var hospitalIdParameter = hospitalId.HasValue ?
                new ObjectParameter("hospitalId", hospitalId) :
                new ObjectParameter("hospitalId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var phoneNoParameter = phoneNo != null ?
                new ObjectParameter("phoneNo", phoneNo) :
                new ObjectParameter("phoneNo", typeof(string));
    
            var phoneNo2Parameter = phoneNo2 != null ?
                new ObjectParameter("phoneNo2", phoneNo2) :
                new ObjectParameter("phoneNo2", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var isPrimaryParameter = isPrimary.HasValue ?
                new ObjectParameter("isPrimary", isPrimary) :
                new ObjectParameter("isPrimary", typeof(bool));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateHospitalDetails", hospitalIdParameter, nameParameter, addressParameter, phoneNoParameter, phoneNo2Parameter, emailParameter, isPrimaryParameter, userIdParameter);
        }
    
        public virtual int SignUpFromCode(Nullable<int> userId, string fname, string lname, string email, string password)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var fnameParameter = fname != null ?
                new ObjectParameter("fname", fname) :
                new ObjectParameter("fname", typeof(string));
    
            var lnameParameter = lname != null ?
                new ObjectParameter("lname", lname) :
                new ObjectParameter("lname", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SignUpFromCode", userIdParameter, fnameParameter, lnameParameter, emailParameter, passwordParameter);
        }
    }
}
